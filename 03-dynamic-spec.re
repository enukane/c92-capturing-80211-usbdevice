= Wi-Fiデバイスの実動作の比較

本章では前章にて挙げた候補からデバイスをピックアップし、
キャプチャ性能や機能について実際に動かしながら検証・比較を行います。
前章の調査により少なくともこれらのデバイスでキャプチャができることは確かなようですが、
あくまでカタログスペック、ソースコード上の調査であり実際本当にできるのか、どれくらいできるのか、
デバイス間で差があるのかは動かしてみないと分かりません。これをこの章で見ていきます。


== 比較方法

ここでは以下の観点で前章に挙げた5つのデバイスの比較を行います。

  * 受信性能
  * 対応チャネル
  * フレーム外に取れる情報
  ** チャネル使用率への対応
  ** スペクトルスキャンへの対応

== 受信性能

ここでは受信性能として、フレームを集めてくる能力という観点で
同じ時間でどれだけフレームを集められるかを比較してみます。
受信性能といった場合、利得や方向といった電波特性にも話が及びますが
ここでは低レイヤの部分はひとまず置いてフレーム数というマクロな視点で
比較を行ってみます。


=== 環境

実験は一般的な(?)オフィス環境で行いました。
当該環境ではオフィス無線LANに接続する端末が一定数おりそれらが
送信する802.11フレームを対象として数の比較をします。
特に手を加えずにキャプチャをした場合と、
データフレームの捕まえやすさを見るべくそれぞれ一定量(802.11nで2Mbps, 802.11acで130Mbps程度)の
背景トラフィックを掛けてみた場合の3種類の環境条件で比較します。

USB Wi-Fiデバイス 5つはハブを介して同じPCに接続されています。
可能な限り近接するように配置はされていますが、完全に同一位置ではありません。
この差異のため、各試験毎にデバイスが装着されているUSBポートをシャッフルし
位置を混ぜるようにしています。
キャプチャの設定は第一章はじめに紹介した「ユーザから見たキャプチャのしかた」
のコマンドラインに則って、36ch を設定し行いました。
検証は各環境条件ごとに3回行います。


計測期間を揃えるために、ここでは時刻による区切りではなく同一チャネルに
存在するAPの送信したBeacon 2発の間隔を1つの期間とする方法を採っています。
時刻で区切る場合、フレーム受信処理やpcapngファイルへの書き込み等の
スケジューリングの影響を受けて不利になるデバイスがいる場合があります。
デバイス内部でのキューの順序(最大で受信キューサイズ分のズレが発生する
可能性あり)を度外視すれば、フレームの入ってくる順序は遅延の揺れは
あるものの保たれるとここでは仮定しています。
この前提のもとキャプチャデータ間で共通に存在するはずのパケット
2つをそれぞれ探しだし、その間に挟まれたフレームに絞って比較をすることで
時刻区切りよりも正確な比較になると考えています。
ここでは10秒程度離れた任意のBeacon 2つのシーケンス番号をもとに
それぞれのデバイスのキャプチャデータからその間のフレームを抽出して
比較しています。


=== 比較結果

ここでは指標として、キャプチャしたフレーム数、そのうちFCSエラーと判定されたフレーム数、
正常なフレームのうちタイプ別のフレーム数、Dataフレームの転送レート一覧、MCS Index一覧、
VHT MCS Index一覧とそれぞれのフレーム数をグラフ、表にて図示します。

前述の通り各環境条件ごとに3回計測を行い、大きな外れ値がなく同様の傾向が見られることを
確認した上でその内の1例ずつを記載しています。

==== 環境条件1: 背景トラフィックなし

この環境では、こちらで恣意的なトラフィックは発生させずに
キャプチャを行っています。

//image[test9-normal-chart][環境1: フレーム数比較グラフ][scale=1.0]
//image[test9-normal-table][環境1: フレーム数比較表]

==== 環境条件2: 背景トラフィック 802.11n 2Mbps


この環境では、近くで 802.11n (2x2 MIMO)対応の無線LAN端末を
同一チャネルに存在するAP (3x3 MIMO対応)へ接続し、
iperf3 にて下り方向に2Mbpsのトラフィックをかけ続けた状態でキャプチャを行っています。
802.11n に従って変調されたデータフレームが流れることを期待し
そのキャプチャができるかどうかを見るためにこれを行っています。

//image[test4-2m-chart][環境2: フレーム数比較グラフ][scale=1.0]
//image[test4-2m-table][環境2: フレーム数比較表]

==== 環境条件3:  背景トラフィック 802.11ac 120Mbps

この環境では、前節同様に 802.11ac (3x3 MIMO)対応の無線LAN端末を
同じく AP に接続してトラフィックをながしています。
この環境ではトラフィックを絞ることなく iperf3 にて 130Mbps 程度の
トラフィックが出ていることを確認の上、キャプチャを行っています。
ここでは 802.11ac のトラフィックが収集できるかを見ています。

//image[test2-aciperf-chart][環境3: フレーム数比較グラフ][scale=1.0]
//image[test2-aciperf-table][環境3: フレーム数比較表]

=== 考察

キャプチャできたフレーム数合計という観点でみると、
USB-AC68 と WLI-UV-AG300P がいずれの環境条件でも他を大きく引き離しているのが見て取れます。
WLI-UV-AG300P は主に Control フレームの数で USB-AC68 を含む他のデバイス
を引き離しており、一方で USB-AC68 は特にトラフィックが多い環境で
Data フレーム を他のデバイスよりも相当に多くキャプチャできています。
特に 802.11n および 802.11ac での転送レートで受信したフレームでこれが顕著です。

一方 USB-AC68 を除く他のデバイスでは HT/VHT のフレーム数がかなり少ない、
あるいはゼロという結果が得られています。以前のキャプチャデータでは
WLI-U2-300D でも MCS Index 15 までのフレームを受信できた実績があります。
このため設置位置や周辺環境により USB-AC68 以外のそれが低めに出ている可能性はありそうです。
トラフィックを掛けていた端末やキャプチャ位置を変えての
再計測をした上での比較が望ましいと思われますが、
一方でそれを踏まえても USB-AC68 は飛び抜けて Data フレームの採取に
適していると言えそうです。


採れていないものという観点で見ると、iw set monitor コマンドにて
fcsfail や control を設定しているにもかかわらず USB-AC68 では
いずれの回でも FCS エラーフレーム数が計上されていません。
前章で見たとおり、CRCエラーについては受信デスクリプタにて
分かるようにはなっているはずのため
取得することはコード上できていてもおかしくありませんが、0になっている原因は不明です。
そもそもデバイスから入るようになっているかについて調査が必要でしょう。

WLI-UV-AG300P以外のデバイスではControlフレーム数が圧倒的に少ないという結果になっています。
これらのフレームは低レート(5GHz帯では6Mbpsが基本)で送信されるため位置関係により
受信が阻害されることはないものと思われますが、にもかかわらず計数が少ない数となっています。
こちらについても WI-U2-300D では同様に以前のキャプチャデータでは
拾えていたため環境要因について再検討が必要と言えそうです。


== 対応チャネル

ここではデバイスの対応チャネルについて見ていきます。
それぞれのデバイスで使えるチャネルについては iw list コマンドで一覧を見ることが可能です。
ここではデバイスにチャネルを設定して回り実際に反映できたものをリストアップします。
@<img>{device_channel_table}にその結果を図示します。

//image[device_channel_table][デバイスごとのチャネル対応表(○: 利用可能, ×: 全て利用不可)]

W58帯は日本国内ではまだ解放されていないためキャプチャの用はあまりありませんが、
この帯域を見たい場合は USB-AC68かWI-U2-300D を選択しておけば良いようです。
これまでは対応チャネルの広さもあって WI-U2-300D を選択していましたが、
USB-AC68が4.9GHz帯以外フルコンプとなっておりかなり広い範囲をキャプチャできるのが見て取れます。
珍しいところとしてはWL300NU-AG(carl9170)では802.11jの4.9GHz帯(184, 188, 192, 196ch)に
チューニングすることが可能でした。

== フレーム外の各種情報

=== チャネル使用率

一部のデバイスではチャネル使用率を取ることが可能です。
下記コマンドにより経過時間とその内でチャネルが使われていた時間を得ることができ、
後者で前者を割ることでどれくらい帯域が使われていたのかが分かります。

//cmd{
% iw wlan0 survey dump
//}

今回挙げた5つのデバイスでは、WL300NU-AG、WN-AG450U、WI-U2-300Dがこれに対応しています。
一方で ath9k_htc の WLI-UV-AG300P や rtl8814au の USB-AC68 ではこの情報を取得することができません。
対応デバイスでの出力は以下の様になっています。

//list[wnag450u_survey_dump][survey dump: WN-AG450U および WI-U2-300D での出力]{
        frequency:                      5180 MHz [in use]
        channel active time:            56818 ms
        channel busy time:              13597 ms
        extension channel busy time:    0 ms
//}

//list[wl300nuag_survey_dump][survey dump: WL300NU-AG での出力]{
        frequency:                      5180 MHz [in use]
        noise:                          -98 dBm
        channel active time:            80444 ms
        channel busy time:              11463 ms
        channel transmit time:          0 ms
//}

WL300NU-AG (carl9170) でのみ @<em>{noise} として Noise Floor の値が取れるのが見て取れます。
収集フレーム数の多かった WLI-UV-AG300P、USB-AC68 ともに非対応とのことで、
これらのパケットを集めやすいデバイスに一本化してチャネル使用率も取るという運用はできないようです。

=== スペクトルスキャン

一部のデバイスではスペクトラムアナライザ相当のデータを得ることが可能です。
今回挙げたデバイスの中では WLI-UV-AG300P (ath9k_htc) がこれをサポートしています@<fn>{ref_ath9k_spectral_scan}。
これを用いると @<img>{ath9k_htc_spectral_scan} に図示されるような FFT データを得ることが出来ます。
ここでは 36ch に合わせたため、中心周波数が 5180 MHz で20MHz幅のデータが得られています。

//footnote[ref_ath9k_spectral_scan][https://wireless.wiki.kernel.org/en/users/drivers/ath9k/spectral_scan]


ath9k_htcでのスペクトルスキャンの使い方は以下の通りです。

//cmd{
# 1. スペクトルスキャンを有効化 (root権限が必要)
% echo chanscan > /sys/kernel/debug/ieee80211/phy1/ath9k_htc/spectral_scan_ctl

# 2. Wi-Fiデバイスを 36ch (5180MHz) でスキャンさせデータを溜めさせる
% iw wlan0 scan freq 5180

# 3. スペクトルデータを取得 (読むとクリアされる)
% cat  /sys/kernel/debug/ieee80211/phy1/ath9k_htc/spectral_scan0 > /tmp/samples_out

# 4. スペクトルスキャンを無効化
% echo disable > /sys/kernel/debug/ieee80211/phy1/ath9k_htc/spectral_scan_ctl

# 5. fft_eval を用いて解析 (make nosdlでコンパイルしたもの)
% fft_eval /tmp/sample_out
//}

fft_eval @<fn>{fft_eval} により @<list>{fft_eval_output} のようなJSON形式での
FFT データを得ることができます。中身は時刻やRSSI、ノイズフロアの値ともに
OFDMでのサブキャリアの間隔で周波数とそれに紐付く電波強度が56セット分配列に
詰め込まれています。これを取り出してプロットすると先に挙げたようなスペクトラムアナライザ
としての出力を得ることができます。

//footnote[fft_eval][https://github.com/simonwunderlich/FFT_eval.git]

//list[fft_eval_output][fft_eval: JSON形式のFFTデータ出力]{
{
  "tsf": 230291,
  "central_freq": 5180,
  "rssi": -12,
  "noise": -95,
  "data": [
    ....
    [
      5180.356934,
      -149.059677
    ],
    [
      5180.714355,
      -125.160149
    ],
    [
      5181.071289,
      -122.21122
    ],
    ....
//}

//image[ath9k_htc_spectral_scan][ath9k_htc: スペクトルスキャン機能][scale=0.7]

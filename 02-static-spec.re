= 探す・比較するUSB Wi-Fi アダプタ

この章では、使える USB Wi-Fi アダプタを探してきてそのスペックやコード上での
採れる情報の比較を行います。

== どうやって探す、USB Wi-Fi アダプタ

PCパーツ売り場を見渡してもおわかり頂けるように USB Wi-Fi アダプタ
はそれこそ山のごとく製品が存在しています。
この中からてきとうにピックアップしてキャプチャに使えればハッピーなのですが
Windows向けのドライバしかなかったりステーションモード only だったりと
目的に合致するものを徒手空拳で見つけるのはなかなか困難です。

//image[so_many_devices][様々な USB Wi-Fi アダプタ][scale=0.5]

基本的には買ってきて試すのが確実かつ愚直ではありますが、
USB Wi-Fi アダプタガチャをするのはあまりにも資源と資金の無駄なので
ここは先人の知恵に頼りましょう。
下記に示す WikiDevi @<fn>{wikidevi} なるサイトがあり世の中の結構な数の Wi-Fi デバイスの
情報がここにまとめられています。

//footnote[wikidevi][https://wikidevi.com/wiki/Main_Page]

若干ナビゲーションしづらいサイトではありますが、プロダクトのPID/VIDや
載っているチップ、対応するドライバの有無やモニタモードのサポート状況等が
コンパクトにまとまっており相互にたどることも可能です。
特に Linux ドライバのリストから製品をたどることが出来る一覧ページが有用です@<fn>{wikidevi-linux}。

//footnote[wikidevi-linux][https://wikidevi.com/wiki/Category:Linux_driver/802dot11]

モニタモードをサポートした適切なドライバを見つけだし、そこから対応しているチップそして
それを搭載した製品へとたどっていくというのがデバイス探しの常套手段です。

== モニタモードが利用可能なUSB Wi-Fi デバイスドライバ

キャプチャにあたって欲しいのはモニタモードがサポートされ802.11n以上に対応し
2.4GHz帯も5GHz帯も利用可能なデバイスです。
WikiDeviに記載の範囲、そしてこれまで検証してきた範囲ではこれを満たす
デバイスおよびドライバの候補として Linux では以下の様な選択肢があります。

: 旧Ralink系: rt2800usb
  RT2770, RT3573, RT5572, RT3572搭載製品が該当
: Atheros系: carl9170, ath9k_htc
  AR9170(Otus), AR9280(Merlin)搭載製品が該当
: Realtek系: rtl8812au, rtl8814au
  RTL8812AU, RTL8814AU搭載製品が該当。
  Linux標準のドライバはSTAモードのみ対応のため、モニタモードをサポートしたコミュニティドライバの導入が必要@<fn>{rtl8812au_driver}

//footnote[rtl8812au_driver][https://github.com/astsam/rtl8812au.git]

これらに対応した製品で手に入り易い(Amazonで見つけやすい or
または店頭で並んでいるもの)、あるいは面白そうな製品でキャプチャ用に利用できる
と思われるものを独断と偏見で@<img>{devcomp-ralink}, @<img>{devcomp-other} にならべてみました。
型番の後ろの括弧内の数値は参考価格として本稿執筆時のAmazonでの価格です。
太字下線入りのものは次章にて実際にキャプチャをしてみての比較
と検証を行うものです。以降はそれぞれの製品について詳細を見ていきます。

//image[devcomp-ralink][旧Ralink系デバイス]

//image[devcomp-other][Atheros, Realtek系デバイス]


Ralink RT2770, RT3572は国内で入手しやすいものはありませんが、海外品として
Alfa Network のAWUS051NHがあります。v1は 1x2 MIMO のRT2770、v2は 2x2 MIMO の RT3572 となっています。
どちらも片側のアンテナが RP-SMA で接続されており任意のものにすげ替えられるという利点があります。


Ralink RT3573はモニタモード対応のWi-Fiアダプタには珍しく 3x3 MIMO に対応
と謳っている製品です。国内流通品も多く、WLI-UC-G450を中心に廉価な製品が存在します。
WN-AG450U を含めて、良くあるドングル型ではなくマイクロUSBケーブルで接続する
変わった形のデバイスが多い印象です(たとえば ASUS USB-N66 など)。


Ralink RT5572 が入っている WI-U2-300D はこれまで頒布した薄い本にて主力として用いてきたデバイスです。
RalinkがMediatekに買われる前の最後のチップであり、(相対的に)新しい
ためかまだ大型家電量販店の店頭でも見つかる程度に流通しています。
コンパクトなわりにいろいろできるため重宝してきました。

Atheros AR9170は、AirMagnet のオプションアダプタとして用いられている
Proxim Orinoco 8494 にも搭載されているチップです。
日本で手に入り易い製品としては掲載した NEC Aterm WL300NU-AG があります。
ただし他のデバイスに比べてお値段が高めの印象です。

PCIeデバイスでも用いられているAR9280系チップを搭載した、ath9k_htc対応
製品は Buffalo WLI-UV-AG300P が出回っています。
併記しているSony UWA-BR100 はラベルの表記以外このデバイスとうり二つであり
OEMとして筐体が使い回されているのかもしれません。
表には Panasonic 社のドングルを載せていますが、
この他にも Toshiba WLM-20U2 など各社のテレビに装着し
無線LANネットワークに接続するためのアダプタとして
販売されていることが多いようです。
前項同様 Atheros なのでという傾向も多分にありそうですが、
家電向けという経緯もあってかデバイス自体の定価はかなり高めでです。


これらのデバイスを用いてより多くのフレームを採ることが目的であるため、
スペックにおいては以下の点に着目して見ていきます。

: 1. ストリーム数が大きいほうが良い
  より高速な変調が行われているフレームは、それをサポートしていない
  デバイスからは受信できません。このためMIMOのストリーム数(受信側)が
  大きければ大きいほどよいと言えるでしょう
: 3. より高位のモードに対応しているほど良い
  ストリーム数同様、より多くフレームを集めその情報を正しく取得する
  ためにも802.11acでサポートされる転送レートやフレームにも対応できている
  ことが望ましいでしょう
: 3. アンテナが外付けできるとベスト
  グレーではありますが、受信のみに限定することを前提により強力なアンテナ
  に交換可能なデバイスだとより広範囲のフレームを採取できる可能性があります。

昨今、ノートPCやスマートフォンで802.11ac対応はもはや標準であるため
802.11 Data フレームを採取して解析を行いたい場合このモードのサポートは外せません。
Data フレームが見えずひたすらBlock Ackなどの制御系のフレームしか見えなくなってしまうといったことが起こります。
とはいえ、USB Wi-Fiアダプタという枠では 802.11ac 対応はおろか
3x3 MIMOでも対応しているデバイスが少ないのが現状です。
今回上げたものでも RT3573, RTL8812, RTL8814 のみが選択肢となります。

ここに挙げたUSB Wi-Fiアダプタは、主にクライアント機器のアダプタとして
日本国内で用いられることを想定している製品です。
流通のためもちろん技適を通してあり、空中線電力等についてその制約を受けます。
このためどんなに大仰なアンテナが付いていようが、
見かけ倒し以上の効果がない可能性があります。
ドングルタイプとしてコンパクトなフォルムの製品はいわずもがなです。
より受信できる範囲を広げたいというキャプチャ向けの用途に特化するには
RP-SMA 端子が生えていると活用の幅が広がる可能性があります。

また無線LAN機器としてのスペックでは直接的にはありませんが、
キャプチャ箱に用いるデバイス、可搬性を考えたデバイスとして
以下の様な要件も存在します。

: 4. コンパクトであること
  3とはトレードオフになりますが筐体としてのキャプチャ箱への納まり,
  キャプチャに無理のないサイズ、形状であることが挙げられます
: 5. 入手しやすいこと
  一部の海外製あるいは入手しづらいデバイスにあっては、その流通の
  少なさによるものか数万円程度で販売されている製品もあります。
  予備機も作れなくなるため入手しづらいデバイスは、有用性次第ですが出来れば避けたいところです。


== ドライバにみる Radiotap ヘッダの差異

前章では、802.11スタック内の情報がどのように Radiotap ヘッダのフィールドに
マップされているかを見ていきました。この情報の大本としては前節に挙げたデバイスドライバが
ハードウェアからどのような情報を引っ張ってくるかに依存します。

ここではそれぞれのデバイスドライバで ieee80211_rx_status 構造体にどのような情報を埋めており、
それが Radiotap ヘッダにどのように影響するかを整理してみます。


@<img>{rt2800_status_to_rtap} で示されるrt2800usbでは mactime が一応指定されてはいるのですが、
中身の値がおそらく0のままであるのと適切なフラグ(RX_FLAG_MACTIME系)が入っていません。
このためコード上それっぽく書いてあるものの radiotap.tsft により正確な受信時刻を取得できないようになっています。
また一応 2x2 MIMO 対応ではありますが、受信チェインごとにRSSIの取得といったことも出来ません。


@<img>{carl9170_status_to_rtap} で示されるcarl9170では他のドライバと異なり
PLCPエラーの有無を反映できるようになっています。ただし radiotap.flags.badfcs にまとめられてしまうため
FCSエラーとの区別は付きません。またこのデバイスドライバでは今回挙げたものでは唯一、AMPDU 系の情報が
設定されるようになっています。A-MPDU 中のサブフレームについては RSSI を取得することができないため
RX_FLAG_NO_SIGNAL_VAL が入り dbm_antsignal が空になる場合があります。
このドライバでも受信チェインごとのRSSIは取得できません。


@<img>{ath9khtc_status_to_rtap} で示される ath9k_htc では唯一 mactime が取得可能です。
その他の項目は carl9170 と大体同じですが 受信アンテナ全体での RSSI (RSSI combined)に加えて
受信チェインごとのRSSI も取得できます。


rtl8812au/rtl8814auは、802.11スタックを経由せずに直接ネットワークコアにフレームを引き渡す
構造になっています。このため自前で Radiotap ヘッダを構成するロジック(fill_radiotap_hdr)
を実装しており、受信デスクリプタ(rx_pkt_attrib構造体）から直接各フィールドにマップしています。
@<img>{rtl8812au_to_rtap} はその関係について一覧した表です。
このデバイスドライバでのみ 802.11ac に対応しているため radiotap.vht フィールド以下に
VHT MCS Indexなどが入ります。

//image[rt2800_status_to_rtap][rt2800usb から Radiotap]

//image[carl9170_status_to_rtap][carl9170 から Radiotap]

//image[ath9khtc_status_to_rtap][ath9k_htc から Radiotap]

//image[rtl8812au_to_rtap][rtl8812au/rtl8824au から Radiotap]

